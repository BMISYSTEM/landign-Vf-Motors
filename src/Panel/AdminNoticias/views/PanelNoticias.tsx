import axios, { isAxiosError } from "axios";
import React, { ChangeEvent, useState } from "react";
import useSWR from "swr";
// Generated by https://quicktype.io

export interface Errors {
  message: string;
  errors: ErrorsClass;
}

export interface ErrorsClass {
  titulo: string[];
  imagen: string[];
  noticia: string[];
}
// Generated by https://quicktype.io

export interface Respuesta {
  succes: string;
}

export interface Noticias {
  succes: Succe[];
}

export interface Succe {
  id: number;
  titulo: string;
  imagen: string;
  noticia: string;
  created_at: Date;
  updated_at: Date;
}

export const PanelNoticias = () => {
  const url = import.meta.env.VITE_API_URL;
  const urlImagen = import.meta.env.VITE_API_URL_IMAGE;
  const token = localStorage.getItem("token");
  const [respuesta, setRespuesta] = useState<Respuesta | null>();
  const [error, setError] = useState<Errors | null>();
  const [loading, setloading] = useState<boolean>(false);
  const [titulo, setTitulo] = useState<string>("");
  const [imagen, setImagen] = useState<File | undefined>();
  const [noticia, setNoticia] = useState<string>("");
  const almacenadoImagen = async (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setImagen(e.target.files[0]);
    }
    console.log(imagen);
  };
  const crearNoticia: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    const datos = {
      titulo,
      imagen: imagen,
      noticia,
    };
    setloading(true);
    setError(null);
    setRespuesta(null);
    try {
      const { data } = await axios.post(`${url}/createnoticia`, datos, {
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "multipart/form-data",
        },
      });
      setRespuesta(data);
      mutate();
    } catch (error) {
      if (isAxiosError(error) && error.response) {
        setError(error.response.data);
      }
    }
    setloading(false);
  };
  
  // eliminar
  
  const deleteNoticia = async (id: number) => {
    const datos = {
      id,
    };
    setloading(true);
    setError(null);
    setRespuesta(null);
    try {
      const { data } = await axios.post(`${url}/deletenoticia`, datos, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      setRespuesta(data);
      mutate();
    } catch (error) {
      if (isAxiosError(error) && error.response) {
        setError(error.response.data);
      }
    }
    setloading(false);
  };
  
  const { data, isLoading, mutate } = useSWR(`${url}/indexnoticias`, () =>
    axios.get(`${url}/indexnoticias`)
  );
  if (isLoading) {
    return (
      <p className="text-3xl font-bold text-green-500 animate-bounce">
        Cargando Noticias...
      </p>
    );
  }
  const listaNoticias: Noticias = data?.data;
  return (
    <section className="w-full h-full flex flex-col gap-5 p-2 overflow-auto">
      <h1 className="text-3xl fotn-bold text-slate-300 text-center">
        Creacion de noticias
      </h1>
      <p
        className={`${
          loading ? "text-green-500 text-sm animate-bounce" : "hidden"
        }`}
      >
        Cargando datos al servidor
      </p>
      <p
        className={`${
          respuesta?.succes ? "text-green-500 text-sm " : "hidden"
        }`}
      >
        {respuesta?.succes}
      </p>

      <div className="w-full  flex flex-row gap-2 ">
        {/* formulario */}
        <form
          action=""
          onSubmit={crearNoticia}
          className="w-1/3 h-full flex flex-col gap-5 text-slate-300 p-2"
        >
          <label htmlFor="">Titulo</label>
          <input
            type="text"
            onChange={(e) => setTitulo(e.target.value)}
            value={titulo}
            className="border rounded-xl bg-[#1D2432] p-2"
          />
          <p
            className={`${
              error?.errors?.titulo ? "text-red-500 text-sm" : "hidden"
            }`}
          >
            {error?.errors?.titulo}
          </p>
          <label htmlFor="">Imagen</label>
          <input type="file" onChange={almacenadoImagen} />
          <p
            className={`${
              error?.errors?.imagen ? "text-red-500 text-sm" : "hidden"
            }`}
          >
            {error?.errors?.imagen}
          </p>

          <label htmlFor="">Noticia</label>
          <textarea
            onChange={(e) => setNoticia(e.target.value)}
            value={noticia}
            className="border rounded-xl bg-[#1D2432] p-2"
          ></textarea>
          <p
            className={`${
              error?.errors?.noticia ? "text-red-500 text-sm" : "hidden"
            }`}
          >
            {error?.errors?.noticia}
          </p>

          <input
            type="submit"
            className="border p-2 bg-green-500 text-white font-bold cursor-pointer hover:opacity-70 transition-all"
          />
        </form>
        {/* lista de noticias */}
        <div className="w-full  overflow-auto">
          <table className="w-full text-center">
            <thead>
              <tr className=" w-full bg-sky-800 text-white ">
                <td>Fecha</td>
                <td>Titulo</td>
                <td>Imagen</td>
                <td>Noticia</td>
                <td>Acciones</td>
              </tr>
            </thead>
            <tbody>
              {listaNoticias.succes.map((noticia, index) => (
                <tr key={index} className="text-white text-center border-b">
                  <td>{noticia.created_at.toString()}</td>
                  <td>{noticia.titulo}</td>
                  <td>
                    <img
                      src={`${urlImagen}${noticia.imagen}`}
                      alt=""
                      className="w-32"
                    />
                  </td>
                  <td className="w-96 h-auto">{noticia.noticia}</td>
                  <td className="">
                    <button onClick={()=>deleteNoticia(noticia.id)} className="p-2 text-white font-bold hover:opacity-70 transition-all bg-red-500 m-2">
                      Eliminar
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </section>
  );
};
